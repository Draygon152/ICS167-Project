//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Scripts/Managers/GameManager/RuntimeGamestateControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @RuntimeGamestateControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @RuntimeGamestateControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""RuntimeGamestateControls"",
    ""maps"": [
        {
            ""name"": ""During Runtime"",
            ""id"": ""0a9fa61d-3049-49e1-a307-6491f2c667b3"",
            ""actions"": [
                {
                    ""name"": ""Runtime Pause Toggle"",
                    ""type"": ""Button"",
                    ""id"": ""88ac946c-c39f-4fb1-82e2-1fce4d582346"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5e41b28f-5bc6-45a5-896a-843775a86547"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Basic Gameplay"",
                    ""action"": ""Runtime Pause Toggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bfc391aa-d085-4e91-88fb-4b9a73eaeab2"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Basic Gameplay"",
                    ""action"": ""Runtime Pause Toggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""During Menu"",
            ""id"": ""a163fed8-9946-4557-b67c-89f8af07b154"",
            ""actions"": [
                {
                    ""name"": ""Menu Pause Toggle"",
                    ""type"": ""Button"",
                    ""id"": ""918945a0-2538-45f6-a728-bce7b71a2fce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""57726c82-972d-4471-8e13-beefbcbfdf9c"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Basic Gameplay"",
                    ""action"": ""Menu Pause Toggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8ef438d8-235f-4407-86ad-bdd34eea42f8"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Basic Gameplay"",
                    ""action"": ""Menu Pause Toggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Basic Gameplay"",
            ""bindingGroup"": ""Basic Gameplay"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // During Runtime
        m_DuringRuntime = asset.FindActionMap("During Runtime", throwIfNotFound: true);
        m_DuringRuntime_RuntimePauseToggle = m_DuringRuntime.FindAction("Runtime Pause Toggle", throwIfNotFound: true);
        // During Menu
        m_DuringMenu = asset.FindActionMap("During Menu", throwIfNotFound: true);
        m_DuringMenu_MenuPauseToggle = m_DuringMenu.FindAction("Menu Pause Toggle", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // During Runtime
    private readonly InputActionMap m_DuringRuntime;
    private IDuringRuntimeActions m_DuringRuntimeActionsCallbackInterface;
    private readonly InputAction m_DuringRuntime_RuntimePauseToggle;
    public struct DuringRuntimeActions
    {
        private @RuntimeGamestateControls m_Wrapper;
        public DuringRuntimeActions(@RuntimeGamestateControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @RuntimePauseToggle => m_Wrapper.m_DuringRuntime_RuntimePauseToggle;
        public InputActionMap Get() { return m_Wrapper.m_DuringRuntime; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DuringRuntimeActions set) { return set.Get(); }
        public void SetCallbacks(IDuringRuntimeActions instance)
        {
            if (m_Wrapper.m_DuringRuntimeActionsCallbackInterface != null)
            {
                @RuntimePauseToggle.started -= m_Wrapper.m_DuringRuntimeActionsCallbackInterface.OnRuntimePauseToggle;
                @RuntimePauseToggle.performed -= m_Wrapper.m_DuringRuntimeActionsCallbackInterface.OnRuntimePauseToggle;
                @RuntimePauseToggle.canceled -= m_Wrapper.m_DuringRuntimeActionsCallbackInterface.OnRuntimePauseToggle;
            }
            m_Wrapper.m_DuringRuntimeActionsCallbackInterface = instance;
            if (instance != null)
            {
                @RuntimePauseToggle.started += instance.OnRuntimePauseToggle;
                @RuntimePauseToggle.performed += instance.OnRuntimePauseToggle;
                @RuntimePauseToggle.canceled += instance.OnRuntimePauseToggle;
            }
        }
    }
    public DuringRuntimeActions @DuringRuntime => new DuringRuntimeActions(this);

    // During Menu
    private readonly InputActionMap m_DuringMenu;
    private IDuringMenuActions m_DuringMenuActionsCallbackInterface;
    private readonly InputAction m_DuringMenu_MenuPauseToggle;
    public struct DuringMenuActions
    {
        private @RuntimeGamestateControls m_Wrapper;
        public DuringMenuActions(@RuntimeGamestateControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MenuPauseToggle => m_Wrapper.m_DuringMenu_MenuPauseToggle;
        public InputActionMap Get() { return m_Wrapper.m_DuringMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DuringMenuActions set) { return set.Get(); }
        public void SetCallbacks(IDuringMenuActions instance)
        {
            if (m_Wrapper.m_DuringMenuActionsCallbackInterface != null)
            {
                @MenuPauseToggle.started -= m_Wrapper.m_DuringMenuActionsCallbackInterface.OnMenuPauseToggle;
                @MenuPauseToggle.performed -= m_Wrapper.m_DuringMenuActionsCallbackInterface.OnMenuPauseToggle;
                @MenuPauseToggle.canceled -= m_Wrapper.m_DuringMenuActionsCallbackInterface.OnMenuPauseToggle;
            }
            m_Wrapper.m_DuringMenuActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MenuPauseToggle.started += instance.OnMenuPauseToggle;
                @MenuPauseToggle.performed += instance.OnMenuPauseToggle;
                @MenuPauseToggle.canceled += instance.OnMenuPauseToggle;
            }
        }
    }
    public DuringMenuActions @DuringMenu => new DuringMenuActions(this);
    private int m_BasicGameplaySchemeIndex = -1;
    public InputControlScheme BasicGameplayScheme
    {
        get
        {
            if (m_BasicGameplaySchemeIndex == -1) m_BasicGameplaySchemeIndex = asset.FindControlSchemeIndex("Basic Gameplay");
            return asset.controlSchemes[m_BasicGameplaySchemeIndex];
        }
    }
    public interface IDuringRuntimeActions
    {
        void OnRuntimePauseToggle(InputAction.CallbackContext context);
    }
    public interface IDuringMenuActions
    {
        void OnMenuPauseToggle(InputAction.CallbackContext context);
    }
}
